


app {

  server {
    protocol = "https"
    host = "prod.niuap.com"
    port = 50399
    InternalToken = "dlkjfadlfkjasdfj3093rjoijfsadf"
  }

  http {
    interface = "0.0.0.0"
    port = 30390
  }

  receiver {
  //  host = "127.0.0.1" //test
//    host = "10.1.29.248"
    host = "0.0.0.0"
//    host = "10.1.120.146"
    port = 61040
  }

  sender {
   // host = "127.0.0.1" //test
//    host = "10.1.29.248"
    host = "0.0.0.0"
  //  host = "10.1.120.146"
    port = 61041
  }

  payloadType {
    tsStream = 33
    authPusher = 101
    authResponse = 102
    authRefuseResponse = 103
    pullStreamRequest = 111
    pullStreamResponse = 112
    pullStreamRefuseResponse = 113
    getClientIdRequest = 114
    getClientIdResponse = 115
    pullStreamUserHeartbeat = 116
    streamStopped = 121
    stopPushingRequest = 131
  }






  client {
    appIds = ["pencil", "roomManager"]
    secureKeys = ["s0n2cRHksGsHxXrL1RZc", "484ec7db9e39bc4b5e3d"]
  }

  projectVersion = "20190508"


}

dependence{
  roomManager{
    protocol = "http"

    host = "localhost"

    port = 30382

    url = "localhost:30382/VideoMeeting/rtp/varify"

    domain = ""

    appId = ""

    secureKey = ""
  }
}



slick.db {
//  url = "jdbc:postgresql://127.0.0.1:5432/pencil"
  url = "jdbc:postgresql://10.1.29.250:5432/pencil"
  user = "pencil"
  password = "1qaz@WSX"
  maximumPoolSize = 3
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}



session {

  cookie {
    name = "pencil"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "0a(do3Dr^20+Gfhf92*md4sK343dg-aj53Kd4ymc23;M0;[0gfdytyrewrei2rl4;zt3;lmO3lrtsy"

}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }



}


